@import java.util.function.Function
@import org.grails.forge.application.ApplicationType
@import org.grails.forge.build.dependencies.CoordinateResolver
@import org.grails.forge.application.Project
@import org.grails.forge.build.dependencies.Coordinate
@import org.grails.forge.build.gradle.GradleBuild
@import org.grails.forge.build.gradle.GradleDsl
@import org.grails.forge.build.gradle.GradlePlugin
@import org.grails.forge.feature.Features
@import org.grails.forge.options.TestFramework
@import org.grails.forge.util.VersionInfo
@import org.grails.forge.options.JdkVersion
@import org.grails.forge.build.gradle.GradleDependency

@args (
ApplicationType applicationType,
Project project,
Function<String, Coordinate> coordinateResolver,
Features features,
GradleBuild gradleBuild
)

@seleniumVersion => {@coordinateResolver.apply("selenium-api").getVersion()}


@if (!features.contains("gradle-build-src") && !gradleBuild.getBuildscriptDependencies().isEmpty()) {
buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
        mavenCentral()
    }
    dependencies { // Not Published to Gradle Plugin Portal
    @for (GradleDependency dependency : gradleBuild.getBuildscriptDependencies()) {
        @dependency.toSnippet()
    }
    }
}

}

@for (String importLine : gradleBuild.getPluginsImports()) {
@(importLine)
}
plugins {
@for (GradlePlugin gradlePlugin : gradleBuild.getPluginsWithoutApply()) {
    @if(gradlePlugin.getVersion() != null) {
    id "@gradlePlugin.getId()" version "@gradlePlugin.getVersion()"
    } else {
    id "@gradlePlugin.getId()"
    }
}
}

@if(!gradleBuild.getPluginsWithApply().isEmpty()) {
// Not Published to Gradle Plugin Portal
@for (GradlePlugin gradlePlugin : gradleBuild.getPluginsWithApply()) {
apply plugin: "@gradlePlugin.getId()"
}
}


group = "@project.getPackageName()"

@if (features.contains("asciidoctor")) {
apply from: "gradle/asciidoc.gradle"
}

repositories {
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core/" }
}

@dependencies.template(applicationType, project, features, gradleBuild)

@if(features.contains("geb-with-webdriver-binaries")) {
// geb-with-webdriver-binaries is limited to Gradle 8.6 with max JDK 21
compileJava.options.release = @JdkVersion.valueOf(Math.min(features.javaVersion().majorVersion(), JdkVersion.JDK_21.majorVersion())).majorVersion()

} else {
compileJava.options.release = @features.getTargetJdk()

}

@if (features.contains("jrebel")) {
run {
    dependsOn(generateRebel)
    if (project.hasProperty("rebelAgent")) {
        jvmArgs(rebelAgent)
    }
}

}

@if (features.contains("springloaded")) {
run {
    jvmArgs("-noverify", "-javaagent:agent/springloaded-1.2.8.RELEASE.jar")
}

}

@if (features.contains("spock")) {
tasks.withType(Test) {
    useJUnitPlatform()
    @if (features.contains("geb")) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty 'webdriver.chrome.driver', "${System.getenv('CHROMEWEBDRIVER')}/chromedriver"
    systemProperty 'webdriver.gecko.driver', "${System.getenv('GECKOWEBDRIVER')}/geckodriver"
    }
}
}

@gradleBuild.renderExtensions()
